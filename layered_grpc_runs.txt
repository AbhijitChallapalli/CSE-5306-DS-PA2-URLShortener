functional requirements:

FR1: Create short URL

FR2: Resolve short URL (GET/HEAD)

FR3: Expire by TTL

FR4: Expire by Max-Clicks

FR5: Top links leaderboard

(Extras at the end: Stats & Health, plus Reset data.)

0) Start by pulling the images from dockerhub using the yaml file by using cloning the git repo:

git clone https://github.com/AbhijitChallapalli/CSE-5306-DS-PA2-URLShortener.git

If you are using MAC OS use this command or skip this step. 

# Set platform before pulling
export DOCKER_DEFAULT_PLATFORM=linux/amd64

cd deploy/compose

docker compose -f docker-compose.layered.remote.yaml pull
docker compose -f docker-compose.layered.remote.yaml up -d


# get container ids for convenience
APP=$(docker compose -f docker-compose.layered.remote.yaml ps -q layered-app)

NGINX=$(docker compose -f docker-compose.layered.remote.yaml ps -q nginx)

echo "APP=$APP"

echo "NGINX=$NGINX"

**Functional Requirement 1: Create Short URL(gRPC)**

A) Create with TTL + max clicks (for expiration demos)

CODE=$(
  docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc '
    grpcurl -plaintext \
      -import-path /app/proto \
      -proto /app/proto/urlshortener.proto \
      -d "{\"long_url\":\"https://www.youtube.com\",\"ttl_sec\":30,\"max_clicks\":2,\"client_ip\":\"127.0.0.1\"}" \
      nginx:8081 urlshort.v1.URLShortenerService.CreateShortURL
  ' | sed -n 's/.*"code": "\(.*\)".*/\1/p'
)
echo "CODE=$CODE"


**Functional Requirement 2: Resolve URL (redirect target)**

A) Resolve (count click)

docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d '{\"code\":\"$CODE\",\"count_click\":true,\"client_ip\":\"127.0.0.1\"}' \
    nginx:8081 urlshort.v1.URLShortenerService.ResolveURL
"
B) Resolve (no click count)

docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d '{\"code\":\"$CODE\",\"count_click\":false,\"client_ip\":\"127.0.0.1\"}' \
    nginx:8081 urlshort.v1.URLShortenerService.ResolveURL
"

**Functional Requirement 3: Get Top Links (leaderboard)**

docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc '
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d "{\"limit\":5}" \
    nginx:8081 urlshort.v1.URLShortenerService.GetTopLinks
'

**Functional Requirement 4: Expire TTL (if created with max_clicks:2)**

for i in 1 2; do
  echo "Resolve #$i"
  docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
    grpcurl -plaintext -import-path /app/proto -proto /app/proto/urlshortener.proto \
      -d '{\"code\":\"$CODE\",\"count_click\":true,\"client_ip\":\"127.0.0.1\"}' \
      nginx:8081 urlshort.v1.URLShortenerService.ResolveURL
  "
done


**Functional Requirement 5: TTL expiry(if created with "ttl_sec":30)**

**As we expired ht elink regenerate a link to test the FR 5**

CODE=$(
  docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc '
    grpcurl -plaintext \
      -import-path /app/proto \
      -proto /app/proto/urlshortener.proto \
      -d "{\"long_url\":\"https://www.youtube.com\",\"ttl_sec\":30,\"max_clicks\":2,\"client_ip\":\"127.0.0.1\"}" \
      nginx:8081 urlshort.v1.URLShortenerService.CreateShortURL
  ' | sed -n 's/.*"code": "\(.*\)".*/\1/p'
)
echo "CODE=$CODE"

sleep 30
docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
  grpcurl -plaintext -import-path /app/proto -proto /app/proto/urlshortener.proto \
    -d '{\"code\":\"$CODE\",\"count_click\":false,\"client_ip\":\"127.0.0.1\"}' \
    nginx:8081 urlshort.v1.URLShortenerService.ResolveURL
"


Functional Requirement 6: Get URL Statistics (per-code stats)

docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d '{\"code\":\"$CODE\"}' \
    nginx:8081 urlshort.v1.URLShortenerService.GetStats
"

Functional Requirement 7: Health Check (service + Redis health)

docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc '
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d "{}" \
    nginx:8081 urlshort.v1.URLShortenerService.HealthCheck
'

Reset data (clean runs)

docker compose -f docker-compose.layered.remote.yaml exec -T redis-master redis-cli FLUSHDB
