docker compose -f docker-compose.layered.remote.yaml up -d

# optional: get container ids for convenience
APP=$(docker compose -f docker-compose.layered.remote.yaml ps -q layered-app)
NGINX=$(docker compose -f docker-compose.layered.remote.yaml ps -q nginx)
echo "APP=$APP"
echo "NGINX=$NGINX"
4) Commands to test the 5 functional requirements (via nginx → gRPC)
All commands below run grpcurl INSIDE your app container (which already contains grpcurl and the protos at /app/proto). They target nginx:8081 (HTTP/2, plaintext).

FR1 — Create Short URL (and capture CODE)
A) Basic create

bash
Copy code
CODE=$(
  docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc '
    grpcurl -plaintext \
      -import-path /app/proto \
      -proto /app/proto/urlshortener.proto \
      -d "{\"long_url\":\"https://www.youtube.com\",\"client_ip\":\"127.0.0.1\"}" \
      nginx:8081 urlshort.v1.URLShortenerService.CreateShortURL
  ' | sed -n 's/.*"code": "\(.*\)".*/\1/p'
)
echo "CODE=$CODE"
B) Create with TTL + max clicks (for expiration demos)

bash
Copy code
CODE=$(
  docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc '
    grpcurl -plaintext \
      -import-path /app/proto \
      -proto /app/proto/urlshortener.proto \
      -d "{\"long_url\":\"https://www.youtube.com\",\"ttl_sec\":30,\"max_clicks\":2,\"client_ip\":\"127.0.0.1\"}" \
      nginx:8081 urlshort.v1.URLShortenerService.CreateShortURL
  ' | sed -n 's/.*"code": "\(.*\)".*/\1/p'
)
echo "CODE=$CODE"
FR2 — Resolve URL (redirect target)
This is gRPC; the service returns the long URL (status + body).

count_click=true → increments analytics and decrements remaining clicks.

count_click=false → read-only resolve.

A) Resolve (count click)

bash
Copy code
docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d '{\"code\":\"$CODE\",\"count_click\":true,\"client_ip\":\"127.0.0.1\"}' \
    nginx:8081 urlshort.v1.URLShortenerService.ResolveURL
"
B) Resolve (no click count)

bash
Copy code
docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d '{\"code\":\"$CODE\",\"count_click\":false,\"client_ip\":\"127.0.0.1\"}' \
    nginx:8081 urlshort.v1.URLShortenerService.ResolveURL
"
C) Demo max-clicks expiry (if created with max_clicks:2)
Run 3 times; the 3rd should show status: 410.

bash
Copy code
for i in 1 2 3; do
  echo "Resolve #$i"
  docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
    grpcurl -plaintext -import-path /app/proto -proto /app/proto/urlshortener.proto \
      -d '{\"code\":\"$CODE\",\"count_click\":true,\"client_ip\":\"127.0.0.1\"}' \
      nginx:8081 urlshort.v1.URLShortenerService.ResolveURL
  "
done
D) Demo TTL expiry (if created with ttl_sec:5)
Wait 6 seconds → expect status: 404.

bash
Copy code
sleep 6
docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
  grpcurl -plaintext -import-path /app/proto -proto /app/proto/urlshortener.proto \
    -d '{\"code\":\"$CODE\",\"count_click\":false,\"client_ip\":\"127.0.0.1\"}' \
    nginx:8081 urlshort.v1.URLShortenerService.ResolveURL
"
FR3 — Get Top Links (leaderboard)
bash
Copy code
docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc '
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d "{\"limit\":5}" \
    nginx:8081 urlshort.v1.URLShortenerService.GetTopLinks
'
FR4 — Get URL Statistics (per-code stats)
bash
Copy code
docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc "
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d '{\"code\":\"$CODE\"}' \
    nginx:8081 urlshort.v1.URLShortenerService.GetStats
"
FR5 — Health Check (service + Redis health)
bash
Copy code
docker compose -f docker-compose.layered.remote.yaml exec layered-app sh -lc '
  grpcurl -plaintext \
    -import-path /app/proto \
    -proto /app/proto/urlshortener.proto \
    -d "{}" \
    nginx:8081 urlshort.v1.URLShortenerService.HealthCheck
'
5) (Bonus) Rate-limit demo (show 429)
Temporarily tighten env (only if you want to demo it clearly). Recreate just the app to pick up new limits:

bash
Copy code
# tighten to 1 request / 10 seconds
RL_LIMIT_PER_MIN=1 RL_WINDOW_SEC=10 \
docker compose -f docker-compose.layered.remote.yaml up -d --force-recreate layered-app
Then call Resolve twice quickly: first allowed, second should return status: 429 in the gRPC response.

Restore defaults:

bash
Copy code
docker compose -f docker-compose.layered.remote.yaml up -d --force-recreate layered-app
6) Reset data (clean runs)
bash
Copy code
docker compose -f docker-compose.layered.remote.yaml exec -T redis-master redis-cli FLUSHDB
