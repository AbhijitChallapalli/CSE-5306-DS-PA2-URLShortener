
MICROservices (HTTP via API Gateway) — k6 + Grafana
0) Bring up the stack + metrics
# App stack (from Docker Hub images)

cd deploy/compose

docker compose -f docker-compose.micro.remote.yaml pull
docker compose -f docker-compose.micro.remote.yaml up -d

# Metrics (InfluxDB + Grafana)
docker compose -f docker-compose.loadviz.yaml up -d

# Create InfluxDB database for k6
docker run --rm --network urlshortener-net curlimages/curl:8.8.0 \
  -s -XPOST 'http://influxdb:8086/query' --data-urlencode 'q=CREATE DATABASE k6'

1) Seed a short code (so Resolve has a target)
# Reuse gateway's network namespace so localhost:8080 works inside the curl container

GATEWAY=$(docker compose -f docker-compose.micro.remote.yaml ps -q api-gateway)

echo "GATEWAY=$GATEWAY"

CODE=$(
  docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
    -s -H 'Content-Type: application/json' \
    -d '{"long_url":"https://www.youtube.com","ttl_sec":300,"max_clicks":100000}' \
    http://localhost:8080/shorten \
  | sed -n 's/.*"code":"\([^"]*\)".*/\1/p'
)
echo "CODE=$CODE"

2) k6 steady-state loads (measure throughput/latency)

Uses your file loadtest/k6/k6-resolve.js.

cd ..

cd ..

**Make sure you are in the root directory to run the test**

#50 VUs, 60s
MSYS_NO_PATHCONV=1 \
docker run --rm --network urlshortener-net \
  -v "$PWD/loadtest/k6:/work" \
  -e HOST="http://api-gateway:8080" -e CODE="$CODE" \
  grafana/k6:latest run \
  --vus 50 --duration 60s \
  --out influxdb=http://influxdb:8086/k6 \
  /work/k6-resolve.js

#100 VUs, 60s
MSYS_NO_PATHCONV=1 \
docker run --rm --network urlshortener-net \
  -v "$PWD/loadtest/k6:/work" \
  -e HOST="http://api-gateway:8080" -e CODE="$CODE" \
  grafana/k6:latest run \
  --vus 100 --duration 60s \
  --out influxdb=http://influxdb:8086/k6 \
  /work/k6-resolve.js

#200 VUs, 60s
MSYS_NO_PATHCONV=1 \
docker run --rm --network urlshortener-net \
  -v "$PWD/loadtest/k6:/work" \
  -e HOST="http://api-gateway:8080" -e CODE="$CODE" \
  grafana/k6:latest run \
  --vus 200 --duration 60s \
  --out influxdb=http://influxdb:8086/k6 \
  /work/k6-resolve.js

(Optional) Ramp test (stages in your JS file)
MSYS_NO_PATHCONV=1 \
docker run --rm --network urlshortener-net \
  -v "$PWD/loadtest/k6:/work" \
  -e HOST="http://api-gateway:8080" -e CODE="$CODE" \
  grafana/k6:latest run \
  --out influxdb=http://influxdb:8086/k6 \
  /work/k6-resolve.js

3) Where to see results


Option 1: 

You can open the html files for loadtest results at : loadtest/k6/

Option 2: 

Open Grafana: http://localhost:3000

Username: admin
password: admin

create a new password.

Add the InfluxDB data source

Data source: your InfluxDB (k6).
Connections → Add new connection → InfluxDB → Add new data source.
Configure:
Query language: InfluxQL (you’re on InfluxDB 1.8)

URL: http://influxdb:8086

Database: k6

Leave auth empty

Click Save & test (should say “Data source is working”).

In Grafana: left sidebar → Dashboards → + Import.

In the “Import via grafana.com” box, enter one of these IDs:

2587 (classic “k6 Load Testing Results”)

14801 (another k6 dashboard, also good)

Click Load → choose your InfluxDB data source (the one you just created) → Import.

Go to Dashboard: You will see two of them with the results.

Re-run your k6 test (so you see live updates).

Open Grafana: http://localhost:3000

login with your username and password. Go to Dashboard and look for results.

