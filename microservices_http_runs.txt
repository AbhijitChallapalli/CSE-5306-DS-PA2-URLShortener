functional requirements:

FR1: Create short URL

FR2: Resolve short URL (GET/HEAD)

FR3: Expire by TTL

FR4: Expire by Max-Clicks

FR5: Top links leaderboard

(Extras at the end: Stats & Health, plus Reset data.)

0) Start by pulling the images from dockerhub using the yaml file:

docker compose -f docker-compose.remote.yaml pull
docker compose -f docker-compose.remote.yaml up -d

# Reuse the gateway’s network namespace so we can reliably call localhost:8080
GATEWAY=$(docker compose -f docker-compose.remote.yaml ps -q api-gateway)
echo "GATEWAY=$GATEWAY"

Functional Requirement 1: Create Short URL

#Create with TTL and max clicks (for expiry demos)

CODE=$(
  docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
    -s -H 'Content-Type: application/json' \
    -d '{"long_url":"https://www.youtube.com","ttl_sec":30,"max_clicks":2}' \
    http://localhost:8080/shorten \
  | sed -n 's/.*"code":"\([^"]*\)".*/\1/p'
)
echo "CODE=$CODE"



Functional Requirement 2: Resolve a code (redirect to original URL)

A) GET (counts a click) → expect 301 with Location: header

docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
  -s -o /dev/null -D - "http://localhost:8080/$CODE" | head -n 3

B) HEAD (does not count a click) → also 301, no body

docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
  -s -I "http://localhost:8080/$CODE" | head -n 3

Functional Requirement 3: Expire by max_clicks (if created with "max_clicks":2)

for i in 1 2; do
  echo "GET #$i"
  docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
    -s -o /dev/null -D - "http://localhost:8080/$CODE" | head -n 2
done
# The 3rd GET should return HTTP/1.1 410

Functional Requirement 4: TTL expiry(if created with "ttl_sec":30)

sleep 30
docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
  -s -o /dev/null -D - "http://localhost:8080/$CODE" | head -n 2
# Expect HTTP/1.1 404 after TTL

Functional Requirement 5: Top links (click leaderboard)

docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
  -s "http://localhost:8080/analytics/top?limit=5"

Functional Requirement 6: Per-code “Stats” (inspect stored values)

docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
  -s "http://localhost:8080/stats/$CODE"


Functional Requirement 7: Health check (gateway + downstream)

docker run --rm --network container:$GATEWAY curlimages/curl:8.8.0 \
  -s http://localhost:8080/healthz


Reset data (for clean reruns)
docker compose -f docker-compose.remote.yaml exec -T redis redis-cli FLUSHDB
